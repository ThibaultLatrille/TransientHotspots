import numpy as np
import os

configfile: 'config.yaml'


def range_config(dic_scale, factor=1.0):
    l = factor * np.linspace(float(dic_scale["min"]),float(dic_scale["max"]),dic_scale["steps"])
    return map(lambda x: f"{x:.2g}",l)


folder = "results/" + config["experiment"]
os.makedirs(f"{folder}/data",exist_ok=True)
b_hot_list = range_config(config["scale"]["b_hot"])
sel_coeff_list = range_config(config["scale"]["sel_coeff"])
hotspot_lifespan_list = [int(i * config["params"]["pop_size"]) for i in config["scale"]["hotspot_lifespan"]]
simu_params = " ".join([f"--{k} {v}" for k, v in config["params"].items() if v != False])
pop_size = config['params']['pop_size']

rule all:
    input: folder + "/heatmap.tsv"

rule simulation:
    input: 'scripts/model.py',
    output: folder + "/data/{b_hot}_{sel_coeff}_{hotspot_lifespan}.tsv.gz",
    shell:
        'python3 {input} {simu_params} --output {output} --b_hot {wildcards.b_hot} --hotspot_lifespan {wildcards.hotspot_lifespan} --sel_coeff_mean {wildcards.sel_coeff}'

rule merge_results:
    input:
        script='scripts/merge_results.py',
        tsv=expand(folder + "/data/{b_hot}_{sel_coeff}_{hotspot_lifespan}.tsv.gz",hotspot_lifespan=hotspot_lifespan_list,b_hot=b_hot_list,sel_coeff=sel_coeff_list)
    output: folder + "/heatmap.tsv"
    shell:
        'python3 {input.script} --input {folder}/data --output {output} --pop_size {pop_size}'
