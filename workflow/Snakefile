import numpy as np

configfile: 'config.yaml'


def range_config(dic_scale, factor=1.0):
    l = factor * np.linspace(float(dic_scale["min"]),float(dic_scale["max"]),dic_scale["steps"])
    return map(lambda x: f"{x:.2g}",l)


b_hot_list = range_config(config["scale"]["b_hot"])
sel_coeff_list = range_config(config["scale"]["sel_coeff"])
lifespan_list = [i * config["params"]["pop_size"] for i in config["scale"]["lifespan"]]
params = " ".join([f"--{k} {v}" for k, v in config["params"].items()])
pop_size = config['params']['pop_size']

rule all:
    input: expand("figures/{b_hot}_{sel_coeff}_heatmap.tsv",b_hot=b_hot_list,sel_coeff=sel_coeff_list)

rule simulation:
    input: 'scripts/model.py',
    output: "results/{b_hot}_{sel_coeff}_{lifespan}.tsv.gz",
    shell:
        'python3 {input} {params} --output {output} --b_hot {wildcards.b_hot} --hotspot_lifespan {wildcards.lifespan} --sel_coeff_mean {wildcards.sel_coeff}'

rule merge_results:
    input:
        script='scripts/merge_results.py',
        tsv=expand("results/{{b_hot}}_{{sel_coeff}}_{lifespan}.tsv.gz",lifespan=lifespan_list)
    output: "figures/{b_hot}_{sel_coeff}_heatmap.tsv"
    shell:
        'python3 {input.script} --input {input.tsv} --output {output} --pop_size {pop_size}'
